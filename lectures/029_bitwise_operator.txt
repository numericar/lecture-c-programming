Bitwise Operator
    ภาษา c จะมี bitwise และ shift 
    โดยสิ่งที่ operator นี้จัดการคือ bit ของเลขจำนวนเต็ม (integer)

    ** ซึ่งโดยปกติแล้วจะไมได้ใช้ในโปรแกรมทั่วไป เนื่องจากเป็นเทคนิคขั้นสูง

    โดยจะมีตัวดำเนินการดังนี้
        1. & (and)
            เป็นการนำตัวถูกดำเนินการทั้ง 2 มา and กันในระดับบิท และจะได้ผลลัพธ์ออกมาเป็นบืท
            เช่น 
                - 5 & 3
                - 101 & 011
                - (1 & 0) (0 & 1) (1 & 1)
                - 001
                - คำตอบที่ได้จาก 5 & 3 คือ 1

        2. | (or)
            เป็นการนำตัวถูกดำเนินการทั้ง 2 มา or กันในระดับบิท และจะได้ผลลัพธ์ออกมาเป็นบืท
            เช่น 
                - 5 | 3
                - 101 | 011
                - (1 | 0) (0 | 1) (1 | 1)
                - 111
                - คำตอบที่ได้จาก 5 | 3 คือ 7

        3. ^ (xor)
            ย่อมาจาก exclusive or โดยคือการที่ ถ้าทั้ง 2 เงื่อนไขเหมือนกัน จะทำให้ผลลัพธ์ออกมาเป็นเท็จ
            โดย 
                - 5 ^ 3
                - 101 ^ 011
                - (1 ^ 0) (0 ^ 1) (1 ^ 1)
                - 110
                - คำตอบที่ได้จาก 5 ^ 3 คือ 6
        4. ~ (binary ones complement)
            กลับบิตทุกตัว
            เช่น 
                - 5 
                - 101
                - ~5
                - 010
                - คำตอบที่ได้จาก ~5 คือ 2


        5. << (shift left)
            เลื่อนบิตไปทางซ้าย และทำการใส่ 0 เติมไปในส่วนที่ถูกเลื่อน
            เช่น เรามีข้อมูลอยู่ 1 byte
                - 5 (00000101)
                - [0, 0, 0 ,0 ,0 ,1 ,0 ,1]
                - 5 << 1
                - [0, 0, 0 ,0, 1, 0, 1, <0>]
                - คำตอบที่ได้จาก 5 << 1 คือ 00001010 = 10

        6. >> (shift right)
            เลื่อนบิตไปทางขวา และทำการใส่ 0 เติมไปในส่วนที่ถูกเลื่อน
            เช่น 
                - 5 (00000101)
                - [0, 0, 0, 0, 0, 1, 0, 1]
                - 5 >> 1
                - [0, 0, 0, 0 ,0 ,0, 1, 0]
                - คำตอบที่ได้จาก 5 >> 1 คือ 00000010 = 2